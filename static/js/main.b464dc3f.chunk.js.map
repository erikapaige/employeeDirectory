{"version":3,"sources":["components/EmployeeTable/EmployeeTable.js","components/Search/Search.js","components/EmployeeCard/EmployeeCard.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeTable","Table","EmployeeData","map","employeeDetail","index","scope","id","last_name","first_name","department","job_title","email","phone_number","Component","Search","props","Form","inline","FormGroup","className","Label","htmlFor","Input","type","name","placeholder","onChange","handleInputChange","Button","onClick","handleSubmit","EmployeeCard","console","log","Card","CardHeader","CardBody","ListGroup","ListGroupItem","employee","App","state","employees","event","setState","target","value","preventDefault","this","last","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b464dc3f.chunk.js","sourcesContent":["// bring in React package\nimport React, { Component } from 'react'\n// bring in Table component form Reactstrap\nimport { Table } from 'reactstrap'\nimport EmployeeData from '../../employees.json'\n\n\nclass EmployeeTable extends Component {\n    \n    render () {\n      return (\n        <Table>\n          <thead>\n            <tr>\n              <th></th>\n              <th>ID</th>\n              <th>Last Name</th>\n              <th>First Name</th>\n              <th>Department</th>\n              <th>Job Title</th>\n              <th>Email</th>\n              <th>Phone Number</th>\n            </tr>\n          </thead>\n          {EmployeeData.map((employeeDetail, index)=>{\n            return <tbody>\n              <tr>\n                <th scope=\"row\"></th>\n                  <td>{employeeDetail.id}</td>\n                  <td>{employeeDetail.last_name}</td>\n                  <td>{employeeDetail.first_name}</td>\n                  <td>{employeeDetail.department}</td>\n                  <td>{employeeDetail.job_title}</td>\n                  <td>{employeeDetail.email}</td>\n                  <td>{employeeDetail.phone_number}</td>\n              </tr>\n            </tbody>\n          })}\n        </Table>\n      )\n    }\n}\n\nexport default EmployeeTable","// bring in React package\nimport React from 'react'\n// importing elements from Reactstrap\nimport { Button, \n  Form, \n  FormGroup, \n  Label, \n  Input } \n  from 'reactstrap'\n\nconst Search = props => {\n  // props is undefined but data appears\n  // console.log(props)\n\n  return(\n    <>\n      <Form inline>\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label htmlFor=\"employee\" className=\"mr-sm-2\"></Label>\n          <Input\n            type=\"employee\"\n            name=\"employee\"\n            id=\"employee\" \n            placeholder=\"Enter Search Criteria...\"\n            onChange={props.handleInputChange}\n            // value={props.state.value} \n            />\n        </FormGroup>\n        <Button onClick={props.handleSubmit}>Search</Button>\n      </Form>\n    </>\n  )\n}\n\nexport default Search","// bring in React package\nimport React from 'react'\n// bring in components form Reactstrap\nimport {\n  Card, \n  CardHeader, \n  CardBody, \n  ListGroup,\n  ListGroupItem } \n  from 'reactstrap'\n\nconst EmployeeCard = props => {\n  // console log props to confirm the key values on object\n  console.log(props)\n\n  return(\n    <div>\n      <Card>\n        <CardHeader>Header</CardHeader>\n        <CardBody>\n          <ListGroup>\n            <ListGroupItem>ID:{props.employee.id}</ListGroupItem>\n            <ListGroupItem> Last Name:{props.employee.last_name}</ListGroupItem>\n            <ListGroupItem> First Name:{props.employee.first_name} </ListGroupItem>\n            <ListGroupItem> Department:{props.employee.department} </ListGroupItem>\n            <ListGroupItem>Job Title:{props.employee.job_title} </ListGroupItem>\n            <ListGroupItem>Email:{props.employee.email} </ListGroupItem>\n            <ListGroupItem>Phone Number:{props.employee.phone_number}</ListGroupItem>\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </div>\n  )\n}\n\nexport default EmployeeCard","// bring in React and 'component' constructor to use smart components\nimport React, { Component } from 'react'\n// bring in array of employees\nimport employees from \"./employees\"\n// bring in individual components \nimport EmployeeTable from './components/EmployeeTable/EmployeeTable'\nimport Search from './components/Search'\nimport EmployeeCard from './components/EmployeeCard'\n\nclass App extends Component {\n  \n  state = {\n    // setting this.state.employees to employees json array\n    employees\n    //properties on JSON\n      //id\n      //first_name\n      //last_name\n      //department\n      //job_title\n      //email\n      //phone_number\n    }\n\n  // grab value by text input\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  // grab value from text input and create card\n  handleSubmit = event => {\n    event.preventDefault()\n    // console.log('ping')\n\n    this.setState({\n      employees:{\n       id: this.state.id,\n       first_name: this.state.first_name,\n       last_name: this.state.last_name,\n       department: this.state.department,\n       job_title:this.state.job_title,\n       email: this.state.email,\n       phone_number: this.state.phone_number\n      }\n    })\n  }\n\n  // return JSX\n  render() {\n    return (\n      <>\n        <h1>Employee Directory</h1>\n        <Search \n          id={this.state.id}\n          first_name={this.state.first_name}\n          last_name={this.state.last}\n          department={this.state.department}\n          job_title={this.state.job_title}\n          email={this.state.email}\n          phone_number={this.state.phone_number}\n          handleInputChange={this.handleInputChange}\n          handleSubmit={this.handleSubmit}/>\n        <hr />\n        <EmployeeTable />\n        <EmployeeCard employee={this.state.employees}/>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}